name: "Criar Branch de Release"

on:
  workflow_dispatch:
    inputs:
      increment_type:
        description: "Tipo de incremento de vers√£o (major, minor, patch)"
        required: true
        default: patch
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  create-release-branch:
    name: Criar Release Branch
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: L√≥gica completa de cria√ß√£o da branch de release
        id: release_logic
        run: |
          set -e # Sai imediatamente se um comando falhar

          BASE_BRANCH="${{ github.ref_name }}"

          # Configurar usu√°rio Git
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          
          # Checkout para obter todas as tags e refer√™ncias remotas
          git checkout --detach
          git fetch --all --tags --prune
          
          # Encontrar √∫ltima tag de release
          latest=$(git tag --list 'release/*' --sort=-v:refname | head -n1)
          if [ -z "$latest" ]; then
            latest="release/0.0.0"
            echo "üîñ Nenhuma tag de release encontrada. Iniciando com 'release/0.0.0'."
          else
            echo "üîñ √öltima tag encontrada: $latest"
          fi

          # Calcular nova vers√£o e branch
          increment_type="${{ github.event.inputs.increment_type }}"
          
          echo "üî® Gerando nova vers√£o a partir de tag: $latest"
          echo "‚û°Ô∏è  Tipo de incremento: $increment_type"
          
          version=$(echo "$latest" | sed 's/release\///')
          
          declare -i major minor patch
          
          major=$(echo "$version" | cut -d'.' -f1)
          if ! [[ "$major" =~ ^[0-9]+$ ]]; then major=0; fi
          
          minor=$(echo "$version" | cut -d'.' -f2)
          if ! [[ "$minor" =~ ^[0-9]+$ ]]; then minor=0; fi
          
          patch=$(echo "$version" | cut -d'.' -f3)
          if ! [[ "$patch" =~ ^[0-9]+$ ]]; then patch=0; fi
          
          echo "üîç Vers√£o atual (major.minor.patch): $major.$minor.$patch"
          
          case "$increment_type" in
            major)
              echo "üöÄ Incrementando a vers√£o MAJOR."
              major=$((major + 1)); minor=0; patch=0 ;;
            minor)
              echo "‚ú® Incrementando a vers√£o MINOR."
              minor=$((minor + 1)); patch=0 ;;
            patch)
              echo "ü©π Incrementando a vers√£o PATCH."
              patch=$((patch + 1)) ;;
            *)
              echo "‚ùó Incremento inv√°lido: $increment_type"; exit 1 ;;
          esac
          
          new_ver="$major.$minor.$patch"
          new_branch="release/$new_ver"
          
          # Checar se a branch j√° existe e criar
          if git ls-remote --exit-code --heads origin "$new_branch"; then
            echo "‚ùå Erro: A branch de release '$new_branch' j√° existe. Por favor, incremente a vers√£o ou remova a branch existente."
            exit 1
          fi

          git checkout -b "$new_branch" "origin/$BASE_BRANCH"
          echo "‚úÖ Nova branch de release '$new_branch' criada localmente a partir de '$BASE_BRANCH'."

          # Push da branch para o reposit√≥rio
          git push -u origin "$new_branch"
          echo "üéâ Branch '$new_branch' enviada para o reposit√≥rio remoto com sucesso!"
