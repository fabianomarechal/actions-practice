name: "Criar Branch de Release"

on:
  workflow_dispatch:
    inputs:
      increment_type:
        description: "Tipo de incremento de vers√£o (major, minor, patch)"
        required: true
        default: patch
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  create-release-branch:
    name: Criar Release Branch
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # para obter todas as tags e hist√≥rico

      - name: Configurar usu√°rio Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Encontrar a √∫ltima vers√£o
        id: find_last_version
        run: |
          # Lista todas as branches e tags de release do reposit√≥rio remoto
          all_versions=$(git ls-remote --refs --sort='v:refname' origin 'refs/tags/release/*' 'refs/heads/release/*' | awk -F'/' '{print $NF}' | tr '\n' ' ')

          highest_version=$(echo "$all_versions" | tr ' ' '\n' | sort -V | tail -n1)

          if [ -z "$highest_version" ]; then
            highest_version="0.0.0"
          fi

          echo "latest_version=$highest_version" >> $GITHUB_OUTPUT
          echo "üîñ √öltima vers√£o sem√¢ntica encontrada: $highest_version"
          
      - name: Calcular nova vers√£o e branch
        id: bump_version
        run: |
          tag="${{ steps.find_tag.outputs.latest_tag }}"
          increment_type="${{ github.event.inputs.increment_type }}"
          
          echo "üî® Gerando nova vers√£o a partir de tag: $tag"
          echo "‚û°Ô∏è  Tipo de incremento: $increment_type"
          
          version=$(echo "$tag" | sed 's/release\///')
          
          declare -i major minor patch
          
          major=$(echo "$version" | cut -d'.' -f1)
          if ! [[ "$major" =~ ^[0-9]+$ ]]; then major=0; fi
          
          minor=$(echo "$version" | cut -d'.' -f2)
          if ! [[ "$minor" =~ ^[0-9]+$ ]]; then minor=0; fi
          
          patch=$(echo "$version" | cut -d'.' -f3)
          if ! [[ "$patch" =~ ^[0-9]+$ ]]; then patch=0; fi
          
          echo "üîç Vers√£o atual (major.minor.patch): $major.$minor.$patch"
          
          case "$increment_type" in
            major)
              echo "üöÄ Incrementando a vers√£o MAJOR."
              major=$((major + 1)); minor=0; patch=0 ;;
            minor)
              echo "‚ú® Incrementando a vers√£o MINOR."
              minor=$((minor + 1)); patch=0 ;;
            patch)
              echo "ü©π Incrementando a vers√£o PATCH."
              patch=$((patch + 1)) ;;
            *)
              echo "‚ùó Incremento inv√°lido: $increment_type"; exit 1 ;;
          esac
          
          new_ver="$major.$minor.$patch"
          new_branch="release/$new_ver"
          
          echo "‚úÖ Nova vers√£o calculada: $new_ver"
          echo "new_version=$new_ver" >> $GITHUB_OUTPUT
          echo "new_branch=$new_branch" >> $GITHUB_OUTPUT

      - name: Criar e push da branch
        run: |
          NEW_BRANCH="${{ steps.bump_version.outputs.new_branch }}"
          BASE_BRANCH="${{ github.ref_name }}"
          
          if git ls-remote --exit-code --heads origin "$NEW_BRANCH"; then
            echo "‚ùå Erro: A branch de release '$NEW_BRANCH' j√° existe. Por favor, incremente a vers√£o ou remova a branch existente."
            exit 1
          fi

          git checkout -b "$NEW_BRANCH" "origin/$BASE_BRANCH"
          echo "‚úÖ Nova branch de release '$NEW_BRANCH' criada localmente a partir de '$BASE_BRANCH'."

          git push -u origin "$NEW_BRANCH"
          echo "üéâ Branch '$NEW_BRANCH' enviada para o reposit√≥rio remoto com sucesso!"
